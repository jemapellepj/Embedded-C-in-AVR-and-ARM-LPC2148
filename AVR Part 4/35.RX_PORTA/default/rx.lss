
rx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000031  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000c9  00000000  00000000  0000014b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000007b  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000d4  00000000  00000000  0000028f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ba  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
  rx();

}
void usart_init()
{
  DDRA=0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
  UBRRL=51;
  70:	83 e3       	ldi	r24, 0x33	; 51
  72:	89 b9       	out	0x09, r24	; 9
  UCSRB=UCSRB|(1<<RXEN);
  74:	54 9a       	sbi	0x0a, 4	; 10
  UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  76:	80 b5       	in	r24, 0x20	; 32
  78:	86 68       	ori	r24, 0x86	; 134
  7a:	80 bd       	out	0x20, r24	; 32
}
void rx()
{
  while( (UCSRA&(1<<RXC))==0);
  7c:	5f 9b       	sbis	0x0b, 7	; 11
  7e:	fe cf       	rjmp	.-4      	; 0x7c <main+0x10>
  PORTA=UDR;
  80:	8c b1       	in	r24, 0x0c	; 12
  82:	8b bb       	out	0x1b, r24	; 27
  84:	fb cf       	rjmp	.-10     	; 0x7c <main+0x10>

00000086 <usart_init>:
  rx();

}
void usart_init()
{
  DDRA=0xff;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	8a bb       	out	0x1a, r24	; 26
  UBRRL=51;
  8a:	83 e3       	ldi	r24, 0x33	; 51
  8c:	89 b9       	out	0x09, r24	; 9
  UCSRB=UCSRB|(1<<RXEN);
  8e:	54 9a       	sbi	0x0a, 4	; 10
  UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  90:	80 b5       	in	r24, 0x20	; 32
  92:	86 68       	ori	r24, 0x86	; 134
  94:	80 bd       	out	0x20, r24	; 32
}
  96:	08 95       	ret

00000098 <rx>:
void rx()
{
  while( (UCSRA&(1<<RXC))==0);
  98:	5f 9b       	sbis	0x0b, 7	; 11
  9a:	fe cf       	rjmp	.-4      	; 0x98 <rx>
  PORTA=UDR;
  9c:	8c b1       	in	r24, 0x0c	; 12
  9e:	8b bb       	out	0x1b, r24	; 27
}
  a0:	08 95       	ret

000000a2 <_exit>:
  a2:	f8 94       	cli

000000a4 <__stop_program>:
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <__stop_program>
