
tx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  0000011a  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000003e  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000256  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000156  00000000  00000000  0000046e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000241  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  00000808  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000104  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000b0  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e1       	ldi	r30, 0x1A	; 26
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 6f 00 	call	0xde	; 0xde <main>
  7a:	0c 94 8b 00 	jmp	0x116	; 0x116 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <usart_init>:
  tx();

}
void usart_init()
{
   UBRRL=51;
  82:	83 e3       	ldi	r24, 0x33	; 51
  84:	89 b9       	out	0x09, r24	; 9
  UCSRB=UCSRB|(1<<TXEN);
  86:	53 9a       	sbi	0x0a, 3	; 10
  UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  88:	80 b5       	in	r24, 0x20	; 32
  8a:	86 68       	ori	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32
}
  8e:	08 95       	ret

00000090 <tx>:
void tx()
{
  90:	a0 e6       	ldi	r26, 0x60	; 96
  92:	b0 e0       	ldi	r27, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  94:	28 ec       	ldi	r18, 0xC8	; 200
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	0b c0       	rjmp	.+22     	; 0xb0 <tx+0x20>

void txstring(char *x)
{
  while(*x)
  {
    UDR=*x;
  9a:	8c b9       	out	0x0c, r24	; 12
	while( (UCSRA&(1<<UDRE))==0);
  9c:	5d 9b       	sbis	0x0b, 5	; 11
  9e:	fe cf       	rjmp	.-4      	; 0x9c <tx+0xc>
  a0:	88 ee       	ldi	r24, 0xE8	; 232
  a2:	93 e0       	ldi	r25, 0x03	; 3
  a4:	f9 01       	movw	r30, r18
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <tx+0x16>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ac:	d9 f7       	brne	.-10     	; 0xa4 <tx+0x14>
	_delay_ms(100);
	x++;
  ae:	11 96       	adiw	r26, 0x01	; 1
  txstring("INFOTECH PRIVATE LIMITED\r");
}

void txstring(char *x)
{
  while(*x)
  b0:	8c 91       	ld	r24, X
  b2:	88 23       	and	r24, r24
  b4:	91 f7       	brne	.-28     	; 0x9a <tx+0xa>
  b6:	a2 e7       	ldi	r26, 0x72	; 114
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	28 ec       	ldi	r18, 0xC8	; 200
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	0b c0       	rjmp	.+22     	; 0xd6 <tx+0x46>
  {
    UDR=*x;
  c0:	8c b9       	out	0x0c, r24	; 12
	while( (UCSRA&(1<<UDRE))==0);
  c2:	5d 9b       	sbis	0x0b, 5	; 11
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <tx+0x32>
  c6:	88 ee       	ldi	r24, 0xE8	; 232
  c8:	93 e0       	ldi	r25, 0x03	; 3
  ca:	f9 01       	movw	r30, r18
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <tx+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d2:	d9 f7       	brne	.-10     	; 0xca <tx+0x3a>
	_delay_ms(100);
	x++;
  d4:	11 96       	adiw	r26, 0x01	; 1
  txstring("INFOTECH PRIVATE LIMITED\r");
}

void txstring(char *x)
{
  while(*x)
  d6:	8c 91       	ld	r24, X
  d8:	88 23       	and	r24, r24
  da:	91 f7       	brne	.-28     	; 0xc0 <tx+0x30>
}
void tx()
{
  txstring("WELCOME TO CETPA\r");
  txstring("INFOTECH PRIVATE LIMITED\r");
}
  dc:	08 95       	ret

000000de <main>:
  tx();

}
void usart_init()
{
   UBRRL=51;
  de:	83 e3       	ldi	r24, 0x33	; 51
  e0:	89 b9       	out	0x09, r24	; 9
  UCSRB=UCSRB|(1<<TXEN);
  e2:	53 9a       	sbi	0x0a, 3	; 10
  UCSRC=UCSRC|(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  e4:	80 b5       	in	r24, 0x20	; 32
  e6:	86 68       	ori	r24, 0x86	; 134
  e8:	80 bd       	out	0x20, r24	; 32
void txstring(char *);
int main()
{
  usart_init();
  while(1)
  tx();
  ea:	0e 94 48 00 	call	0x90	; 0x90 <tx>
  ee:	fd cf       	rjmp	.-6      	; 0xea <main+0xc>

000000f0 <txstring>:
  txstring("WELCOME TO CETPA\r");
  txstring("INFOTECH PRIVATE LIMITED\r");
}

void txstring(char *x)
{
  f0:	dc 01       	movw	r26, r24
  f2:	28 ec       	ldi	r18, 0xC8	; 200
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	0b c0       	rjmp	.+22     	; 0x10e <txstring+0x1e>
  while(*x)
  {
    UDR=*x;
  f8:	8c b9       	out	0x0c, r24	; 12
	while( (UCSRA&(1<<UDRE))==0);
  fa:	5d 9b       	sbis	0x0b, 5	; 11
  fc:	fe cf       	rjmp	.-4      	; 0xfa <txstring+0xa>
  fe:	88 ee       	ldi	r24, 0xE8	; 232
 100:	93 e0       	ldi	r25, 0x03	; 3
 102:	f9 01       	movw	r30, r18
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <txstring+0x14>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 108:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 10a:	d9 f7       	brne	.-10     	; 0x102 <txstring+0x12>
	_delay_ms(100);
	x++;
 10c:	11 96       	adiw	r26, 0x01	; 1
  txstring("INFOTECH PRIVATE LIMITED\r");
}

void txstring(char *x)
{
  while(*x)
 10e:	8c 91       	ld	r24, X
 110:	88 23       	and	r24, r24
 112:	91 f7       	brne	.-28     	; 0xf8 <txstring+0x8>
    UDR=*x;
	while( (UCSRA&(1<<UDRE))==0);
	_delay_ms(100);
	x++;
  }
}
 114:	08 95       	ret

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
