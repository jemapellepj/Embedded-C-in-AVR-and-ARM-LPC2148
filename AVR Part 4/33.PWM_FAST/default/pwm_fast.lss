
pwm_fast.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000128  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000021  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000010d  00000000  00000000  00000169  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000ac  00000000  00000000  00000276  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000013f  00000000  00000000  00000322  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  00000464  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f8  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000018  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include<avr/io.h>
#include<util/delay.h>
int i;
int main()
{
  DDRB=DDRB|(1<<PB3);
  7c:	bb 9a       	sbi	0x17, 3	; 23
  DDRD=DDRD|(1<<PD7);
  7e:	8f 9a       	sbi	0x11, 7	; 17
  TCNT0=99;TCCR0=0x69;
  80:	83 e6       	ldi	r24, 0x63	; 99
  82:	82 bf       	out	0x32, r24	; 50
  84:	99 e6       	ldi	r25, 0x69	; 105
  86:	93 bf       	out	0x33, r25	; 51
  TCNT2=99;TCCR2=0x79;
  88:	84 bd       	out	0x24, r24	; 36
  8a:	89 e7       	ldi	r24, 0x79	; 121
  8c:	85 bd       	out	0x25, r24	; 37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8e:	40 e2       	ldi	r20, 0x20	; 32
  90:	5e e4       	ldi	r21, 0x4E	; 78
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	30 e0       	ldi	r19, 0x00	; 0
  while(1)
  {
      for(i=0;i<=255;i++)
	  {
	     OCR0=OCR2=i;
  96:	23 bd       	out	0x23, r18	; 35
  98:	83 b5       	in	r24, 0x23	; 35
  9a:	8c bf       	out	0x3c, r24	; 60
  9c:	ca 01       	movw	r24, r20
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0x22>
  a2:	2f 5f       	subi	r18, 0xFF	; 255
  a4:	3f 4f       	sbci	r19, 0xFF	; 255
  DDRD=DDRD|(1<<PD7);
  TCNT0=99;TCCR0=0x69;
  TCNT2=99;TCCR2=0x79;
  while(1)
  {
      for(i=0;i<=255;i++)
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	20 30       	cpi	r18, 0x00	; 0
  aa:	38 07       	cpc	r19, r24
  ac:	91 f3       	breq	.-28     	; 0x92 <main+0x16>
  ae:	f3 cf       	rjmp	.-26     	; 0x96 <main+0x1a>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
