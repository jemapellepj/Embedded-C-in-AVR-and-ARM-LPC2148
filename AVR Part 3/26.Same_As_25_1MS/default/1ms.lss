
1ms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000136  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000002b  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000c1  00000000  00000000  00000181  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000008c  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000ed  00000000  00000000  000002ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000bc  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include<avr/io.h>
void delay();
int i;
int main()
{
  DDRA=DDRA|(1<<0);
  7c:	d0 9a       	sbi	0x1a, 0	; 26
         delay();
  }
}
void delay()
{
  TCNT0=131;
  7e:	23 e8       	ldi	r18, 0x83	; 131
  TCCR0=0x02;
  80:	92 e0       	ldi	r25, 0x02	; 2
{
  DDRA=DDRA|(1<<0);
  while(1)
  {
    
        PORTA=PORTA|(1<<0);
  82:	d8 9a       	sbi	0x1b, 0	; 27
         delay();
  }
}
void delay()
{
  TCNT0=131;
  84:	22 bf       	out	0x32, r18	; 50
  TCCR0=0x02;
  86:	93 bf       	out	0x33, r25	; 51
  while( (TIFR&(1<<TOV0))==0);//100uS
  88:	08 b6       	in	r0, 0x38	; 56
  8a:	00 fe       	sbrs	r0, 0
  8c:	fd cf       	rjmp	.-6      	; 0x88 <main+0xc>
  TIFR=TIFR|(1<<TOV0);
  8e:	88 b7       	in	r24, 0x38	; 56
  90:	81 60       	ori	r24, 0x01	; 1
  92:	88 bf       	out	0x38, r24	; 56
  while(1)
  {
    
        PORTA=PORTA|(1<<0);
     	delay();
        PORTA=PORTA&~(1<<0);
  94:	d8 98       	cbi	0x1b, 0	; 27
         delay();
  }
}
void delay()
{
  TCNT0=131;
  96:	22 bf       	out	0x32, r18	; 50
  TCCR0=0x02;
  98:	93 bf       	out	0x33, r25	; 51
  while( (TIFR&(1<<TOV0))==0);//100uS
  9a:	08 b6       	in	r0, 0x38	; 56
  9c:	00 fe       	sbrs	r0, 0
  9e:	fd cf       	rjmp	.-6      	; 0x9a <main+0x1e>
  TIFR=TIFR|(1<<TOV0);
  a0:	88 b7       	in	r24, 0x38	; 56
  a2:	81 60       	ori	r24, 0x01	; 1
  a4:	88 bf       	out	0x38, r24	; 56
  a6:	ed cf       	rjmp	.-38     	; 0x82 <main+0x6>

000000a8 <delay>:
         delay();
  }
}
void delay()
{
  TCNT0=131;
  a8:	83 e8       	ldi	r24, 0x83	; 131
  aa:	82 bf       	out	0x32, r24	; 50
  TCCR0=0x02;
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	83 bf       	out	0x33, r24	; 51
  while( (TIFR&(1<<TOV0))==0);//100uS
  b0:	08 b6       	in	r0, 0x38	; 56
  b2:	00 fe       	sbrs	r0, 0
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <delay+0x8>
  TIFR=TIFR|(1<<TOV0);
  b6:	88 b7       	in	r24, 0x38	; 56
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	88 bf       	out	0x38, r24	; 56


}
  bc:	08 95       	ret

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
