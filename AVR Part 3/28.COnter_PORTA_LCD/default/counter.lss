
counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000076  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000035b  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000144  00000000  00000000  0000060d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002fa  00000000  00000000  00000751  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00000a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000142  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000091  00000000  00000000  00000c0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  64:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <lcdcmd>:
 DDRD=0xff;
 lcdcmd(0x02);lcdcmd(0x28);lcdcmd(0x0e);
}
void lcdcmd(char x)
{
	lcd=x&0xf0;
  6c:	28 2f       	mov	r18, r24
  6e:	20 7f       	andi	r18, 0xF0	; 240
  70:	22 bb       	out	0x12, r18	; 18
	lcd= (x<<4)&0xf0;
	lcdcmd_enable();
}
void lcdcmd_enable()
{
  	lcd=lcd&~(1<<0);// PD0==RS=0;
  72:	90 98       	cbi	0x12, 0	; 18
	lcd=lcd&~(1<<1);// PD1==RW=0;
  74:	91 98       	cbi	0x12, 1	; 18
	lcd=lcd|(1<<2); // PD2==EN=1;
  76:	92 9a       	sbi	0x12, 2	; 18
	lcd=lcd&~(1<<2); // PD2==EN=0;
  78:	92 98       	cbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7a:	2a ef       	ldi	r18, 0xFA	; 250
  7c:	30 e0       	ldi	r19, 0x00	; 0
  7e:	f9 01       	movw	r30, r18
  80:	31 97       	sbiw	r30, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <lcdcmd+0x14>
}
void lcdcmd(char x)
{
	lcd=x&0xf0;
    lcdcmd_enable();
	lcd= (x<<4)&0xf0;
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	44 e0       	ldi	r20, 0x04	; 4
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	4a 95       	dec	r20
  8e:	e1 f7       	brne	.-8      	; 0x88 <lcdcmd+0x1c>
  90:	82 bb       	out	0x12, r24	; 18
	lcdcmd_enable();
}
void lcdcmd_enable()
{
  	lcd=lcd&~(1<<0);// PD0==RS=0;
  92:	90 98       	cbi	0x12, 0	; 18
	lcd=lcd&~(1<<1);// PD1==RW=0;
  94:	91 98       	cbi	0x12, 1	; 18
	lcd=lcd|(1<<2); // PD2==EN=1;
  96:	92 9a       	sbi	0x12, 2	; 18
	lcd=lcd&~(1<<2); // PD2==EN=0;
  98:	92 98       	cbi	0x12, 2	; 18
  9a:	c9 01       	movw	r24, r18
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <lcdcmd+0x30>
{
	lcd=x&0xf0;
    lcdcmd_enable();
	lcd= (x<<4)&0xf0;
	lcdcmd_enable();
}
  a0:	08 95       	ret

000000a2 <lcd_init>:
	pos--;//0x81//0x80
  }
}
void lcd_init()
{
 DDRD=0xff;
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	81 bb       	out	0x11, r24	; 17
 lcdcmd(0x02);lcdcmd(0x28);lcdcmd(0x0e);
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	0e 94 36 00 	call	0x6c	; 0x6c <lcdcmd>
  ac:	88 e2       	ldi	r24, 0x28	; 40
  ae:	0e 94 36 00 	call	0x6c	; 0x6c <lcdcmd>
  b2:	8e e0       	ldi	r24, 0x0E	; 14
  b4:	0e 94 36 00 	call	0x6c	; 0x6c <lcdcmd>
}
  b8:	08 95       	ret

000000ba <lcdcmd_enable>:
	lcd= (x<<4)&0xf0;
	lcdcmd_enable();
}
void lcdcmd_enable()
{
  	lcd=lcd&~(1<<0);// PD0==RS=0;
  ba:	90 98       	cbi	0x12, 0	; 18
	lcd=lcd&~(1<<1);// PD1==RW=0;
  bc:	91 98       	cbi	0x12, 1	; 18
	lcd=lcd|(1<<2); // PD2==EN=1;
  be:	92 9a       	sbi	0x12, 2	; 18
	lcd=lcd&~(1<<2); // PD2==EN=0;
  c0:	92 98       	cbi	0x12, 2	; 18
  c2:	8a ef       	ldi	r24, 0xFA	; 250
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <lcdcmd_enable+0xc>
	_delay_ms(1);
}
  ca:	08 95       	ret

000000cc <lcddata>:
void lcddata(char data)
{ 
    lcd=data&0xf0;
  cc:	28 2f       	mov	r18, r24
  ce:	20 7f       	andi	r18, 0xF0	; 240
  d0:	22 bb       	out	0x12, r18	; 18
	lcddata_enable();
	
}
void lcddata_enable()
{
 	lcd=lcd|(1<<0);// PD0==RS=1;
  d2:	90 9a       	sbi	0x12, 0	; 18
	lcd=lcd&~(1<<1);// PD1==RW=0;
  d4:	91 98       	cbi	0x12, 1	; 18
	lcd=lcd|(1<<2); // PD2==EN=1;
  d6:	92 9a       	sbi	0x12, 2	; 18
	lcd=lcd&~(1<<2); // PD2==EN=0;
  d8:	92 98       	cbi	0x12, 2	; 18
  da:	2a ef       	ldi	r18, 0xFA	; 250
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	f9 01       	movw	r30, r18
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcddata+0x14>
}
void lcddata(char data)
{ 
    lcd=data&0xf0;
    lcddata_enable();
	lcd=(data<<4)&0xf0;
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	54 e0       	ldi	r21, 0x04	; 4
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	5a 95       	dec	r21
  ee:	e1 f7       	brne	.-8      	; 0xe8 <lcddata+0x1c>
  f0:	82 bb       	out	0x12, r24	; 18
	lcddata_enable();
	
}
void lcddata_enable()
{
 	lcd=lcd|(1<<0);// PD0==RS=1;
  f2:	90 9a       	sbi	0x12, 0	; 18
	lcd=lcd&~(1<<1);// PD1==RW=0;
  f4:	91 98       	cbi	0x12, 1	; 18
	lcd=lcd|(1<<2); // PD2==EN=1;
  f6:	92 9a       	sbi	0x12, 2	; 18
	lcd=lcd&~(1<<2); // PD2==EN=0;
  f8:	92 98       	cbi	0x12, 2	; 18
  fa:	c9 01       	movw	r24, r18
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcddata+0x30>
    lcd=data&0xf0;
    lcddata_enable();
	lcd=(data<<4)&0xf0;
	lcddata_enable();
	
}
 100:	08 95       	ret

00000102 <convert_ascii>:

  }
return 0;
}
void convert_ascii(int a)//253
{
 102:	ff 92       	push	r15
 104:	0f 93       	push	r16
 106:	1f 93       	push	r17
 108:	f8 2e       	mov	r15, r24
 10a:	19 2f       	mov	r17, r25
 10c:	02 e8       	ldi	r16, 0x82	; 130
  int i,a1;
  char pos=0x82;
  for(i=0;i<=2;i++)//i=0,1,2,3(flase)
  {
    lcdcmd(pos);
 10e:	80 2f       	mov	r24, r16
 110:	0e 94 36 00 	call	0x6c	; 0x6c <lcdcmd>
    a1=a%10;//3//5//2
 114:	8f 2d       	mov	r24, r15
 116:	91 2f       	mov	r25, r17
 118:	6a e0       	ldi	r22, 0x0A	; 10
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	0e 94 bb 00 	call	0x176	; 0x176 <__divmodhi4>
 120:	28 2f       	mov	r18, r24
	a=a/10; //25//2//0
 122:	8f 2d       	mov	r24, r15
 124:	91 2f       	mov	r25, r17
 126:	6a e0       	ldi	r22, 0x0A	; 10
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	0e 94 bb 00 	call	0x176	; 0x176 <__divmodhi4>
 12e:	f6 2e       	mov	r15, r22
 130:	17 2f       	mov	r17, r23
	lcddata(a1+48);//'3'//'5'//'2'
 132:	82 2f       	mov	r24, r18
 134:	80 5d       	subi	r24, 0xD0	; 208
 136:	0e 94 66 00 	call	0xcc	; 0xcc <lcddata>
	pos--;//0x81//0x80
 13a:	01 50       	subi	r16, 0x01	; 1
}
void convert_ascii(int a)//253
{
  int i,a1;
  char pos=0x82;
  for(i=0;i<=2;i++)//i=0,1,2,3(flase)
 13c:	0f 37       	cpi	r16, 0x7F	; 127
 13e:	39 f7       	brne	.-50     	; 0x10e <convert_ascii+0xc>
    a1=a%10;//3//5//2
	a=a/10; //25//2//0
	lcddata(a1+48);//'3'//'5'//'2'
	pos--;//0x81//0x80
  }
}
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	ff 90       	pop	r15
 146:	08 95       	ret

00000148 <main>:
void lcdcmd_enable();
void lcddata_enable();
void convert_ascii(int );
int main()
{
  TCNT0=0;
 148:	12 be       	out	0x32, r1	; 50
  TCCR0=0x06;
 14a:	86 e0       	ldi	r24, 0x06	; 6
 14c:	83 bf       	out	0x33, r24	; 51
  lcd_init();
 14e:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_init>
  while(1)
  {
    do
	{
	   //lcddata(TCNT0+48);
	   convert_ascii(TCNT0);
 152:	82 b7       	in	r24, 0x32	; 50
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 81 00 	call	0x102	; 0x102 <convert_ascii>
	   lcdcmd(0x01);
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	0e 94 36 00 	call	0x6c	; 0x6c <lcdcmd>
	}  while( (TIFR&(1<<TOV0))==0);    
 160:	88 b7       	in	r24, 0x38	; 56
 162:	f7 cf       	rjmp	.-18     	; 0x152 <main+0xa>

00000164 <lcddata_enable>:
	lcddata_enable();
	
}
void lcddata_enable()
{
 	lcd=lcd|(1<<0);// PD0==RS=1;
 164:	90 9a       	sbi	0x12, 0	; 18
	lcd=lcd&~(1<<1);// PD1==RW=0;
 166:	91 98       	cbi	0x12, 1	; 18
	lcd=lcd|(1<<2); // PD2==EN=1;
 168:	92 9a       	sbi	0x12, 2	; 18
	lcd=lcd&~(1<<2); // PD2==EN=0;
 16a:	92 98       	cbi	0x12, 2	; 18
 16c:	8a ef       	ldi	r24, 0xFA	; 250
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <lcddata_enable+0xc>
	_delay_ms(1);
}
 174:	08 95       	ret

00000176 <__divmodhi4>:
 176:	97 fb       	bst	r25, 7
 178:	09 2e       	mov	r0, r25
 17a:	07 26       	eor	r0, r23
 17c:	0a d0       	rcall	.+20     	; 0x192 <__divmodhi4_neg1>
 17e:	77 fd       	sbrc	r23, 7
 180:	04 d0       	rcall	.+8      	; 0x18a <__divmodhi4_neg2>
 182:	0c d0       	rcall	.+24     	; 0x19c <__udivmodhi4>
 184:	06 d0       	rcall	.+12     	; 0x192 <__divmodhi4_neg1>
 186:	00 20       	and	r0, r0
 188:	1a f4       	brpl	.+6      	; 0x190 <__divmodhi4_exit>

0000018a <__divmodhi4_neg2>:
 18a:	70 95       	com	r23
 18c:	61 95       	neg	r22
 18e:	7f 4f       	sbci	r23, 0xFF	; 255

00000190 <__divmodhi4_exit>:
 190:	08 95       	ret

00000192 <__divmodhi4_neg1>:
 192:	f6 f7       	brtc	.-4      	; 0x190 <__divmodhi4_exit>
 194:	90 95       	com	r25
 196:	81 95       	neg	r24
 198:	9f 4f       	sbci	r25, 0xFF	; 255
 19a:	08 95       	ret

0000019c <__udivmodhi4>:
 19c:	aa 1b       	sub	r26, r26
 19e:	bb 1b       	sub	r27, r27
 1a0:	51 e1       	ldi	r21, 0x11	; 17
 1a2:	07 c0       	rjmp	.+14     	; 0x1b2 <__udivmodhi4_ep>

000001a4 <__udivmodhi4_loop>:
 1a4:	aa 1f       	adc	r26, r26
 1a6:	bb 1f       	adc	r27, r27
 1a8:	a6 17       	cp	r26, r22
 1aa:	b7 07       	cpc	r27, r23
 1ac:	10 f0       	brcs	.+4      	; 0x1b2 <__udivmodhi4_ep>
 1ae:	a6 1b       	sub	r26, r22
 1b0:	b7 0b       	sbc	r27, r23

000001b2 <__udivmodhi4_ep>:
 1b2:	88 1f       	adc	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	5a 95       	dec	r21
 1b8:	a9 f7       	brne	.-22     	; 0x1a4 <__udivmodhi4_loop>
 1ba:	80 95       	com	r24
 1bc:	90 95       	com	r25
 1be:	bc 01       	movw	r22, r24
 1c0:	cd 01       	movw	r24, r26
 1c2:	08 95       	ret

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
