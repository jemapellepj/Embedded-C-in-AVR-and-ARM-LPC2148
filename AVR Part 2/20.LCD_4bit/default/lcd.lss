
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000198  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000198  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000007e  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003b7  00000000  00000000  000002c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000170  00000000  00000000  0000067d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000341  00000000  00000000  000007ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000b30  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000013a  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000a9  00000000  00000000  00000cfa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e9       	ldi	r30, 0x98	; 152
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  7a:	0c 94 ca 00 	jmp	0x194	; 0x194 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcdcmd>:
 DDRD=0xff;
 lcdcmd(0x02);lcdcmd(0x28);lcdcmd(0x0e);
}
void lcdcmd(char x)
{
	lcd=x&0xf0;
  82:	28 2f       	mov	r18, r24
  84:	20 7f       	andi	r18, 0xF0	; 240
  86:	22 bb       	out	0x12, r18	; 18
	lcd= (x<<4)&0xf0;
	lcdcmd_enable();
}
void lcdcmd_enable()
{
  	lcd=lcd&~(1<<0);// PD0==RS=0;
  88:	90 98       	cbi	0x12, 0	; 18
	lcd=lcd&~(1<<1);// PD1==RW=0;
  8a:	91 98       	cbi	0x12, 1	; 18
	lcd=lcd|(1<<2); // PD2==EN=1;
  8c:	92 9a       	sbi	0x12, 2	; 18
	lcd=lcd&~(1<<2); // PD2==EN=0;
  8e:	92 98       	cbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  90:	20 ed       	ldi	r18, 0xD0	; 208
  92:	37 e0       	ldi	r19, 0x07	; 7
  94:	f9 01       	movw	r30, r18
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <lcdcmd+0x14>
}
void lcdcmd(char x)
{
	lcd=x&0xf0;
    lcdcmd_enable();
	lcd= (x<<4)&0xf0;
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	44 e0       	ldi	r20, 0x04	; 4
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	4a 95       	dec	r20
  a4:	e1 f7       	brne	.-8      	; 0x9e <lcdcmd+0x1c>
  a6:	82 bb       	out	0x12, r24	; 18
	lcdcmd_enable();
}
void lcdcmd_enable()
{
  	lcd=lcd&~(1<<0);// PD0==RS=0;
  a8:	90 98       	cbi	0x12, 0	; 18
	lcd=lcd&~(1<<1);// PD1==RW=0;
  aa:	91 98       	cbi	0x12, 1	; 18
	lcd=lcd|(1<<2); // PD2==EN=1;
  ac:	92 9a       	sbi	0x12, 2	; 18
	lcd=lcd&~(1<<2); // PD2==EN=0;
  ae:	92 98       	cbi	0x12, 2	; 18
  b0:	c9 01       	movw	r24, r18
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <lcdcmd+0x30>
{
	lcd=x&0xf0;
    lcdcmd_enable();
	lcd= (x<<4)&0xf0;
	lcdcmd_enable();
}
  b6:	08 95       	ret

000000b8 <lcd_init>:

}

void lcd_init()
{
 DDRD=0xff;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	81 bb       	out	0x11, r24	; 17
 lcdcmd(0x02);lcdcmd(0x28);lcdcmd(0x0e);
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
  c2:	88 e2       	ldi	r24, 0x28	; 40
  c4:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
  c8:	8e e0       	ldi	r24, 0x0E	; 14
  ca:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
}
  ce:	08 95       	ret

000000d0 <lcdcmd_enable>:
	lcd= (x<<4)&0xf0;
	lcdcmd_enable();
}
void lcdcmd_enable()
{
  	lcd=lcd&~(1<<0);// PD0==RS=0;
  d0:	90 98       	cbi	0x12, 0	; 18
	lcd=lcd&~(1<<1);// PD1==RW=0;
  d2:	91 98       	cbi	0x12, 1	; 18
	lcd=lcd|(1<<2); // PD2==EN=1;
  d4:	92 9a       	sbi	0x12, 2	; 18
	lcd=lcd&~(1<<2); // PD2==EN=0;
  d6:	92 98       	cbi	0x12, 2	; 18
  d8:	80 ed       	ldi	r24, 0xD0	; 208
  da:	97 e0       	ldi	r25, 0x07	; 7
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <lcdcmd_enable+0xc>
	_delay_ms(1);
}
  e0:	08 95       	ret

000000e2 <lcddata>:
void lcddata(char data)
{ 
  e2:	98 2f       	mov	r25, r24
    lcd=data&0xf0;
  e4:	80 7f       	andi	r24, 0xF0	; 240
  e6:	82 bb       	out	0x12, r24	; 18
	lcddata_enable();
	
}
void lcddata_enable()
{
 	lcd=lcd|(1<<0);// PD0==RS=1;
  e8:	90 9a       	sbi	0x12, 0	; 18
	lcd=lcd&~(1<<1);// PD1==RW=0;
  ea:	91 98       	cbi	0x12, 1	; 18
	lcd=lcd|(1<<2); // PD2==EN=1;
  ec:	92 9a       	sbi	0x12, 2	; 18
	lcd=lcd&~(1<<2); // PD2==EN=0;
  ee:	92 98       	cbi	0x12, 2	; 18
  f0:	28 ee       	ldi	r18, 0xE8	; 232
  f2:	33 e0       	ldi	r19, 0x03	; 3
  f4:	48 ec       	ldi	r20, 0xC8	; 200
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	fa 01       	movw	r30, r20
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <lcddata+0x18>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 102:	d1 f7       	brne	.-12     	; 0xf8 <lcddata+0x16>
}
void lcddata(char data)
{ 
    lcd=data&0xf0;
    lcddata_enable();
	lcd=(data<<4)&0xf0;
 104:	89 2f       	mov	r24, r25
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	54 e0       	ldi	r21, 0x04	; 4
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	5a 95       	dec	r21
 110:	e1 f7       	brne	.-8      	; 0x10a <lcddata+0x28>
 112:	82 bb       	out	0x12, r24	; 18
	lcddata_enable();
	
}
void lcddata_enable()
{
 	lcd=lcd|(1<<0);// PD0==RS=1;
 114:	90 9a       	sbi	0x12, 0	; 18
	lcd=lcd&~(1<<1);// PD1==RW=0;
 116:	91 98       	cbi	0x12, 1	; 18
	lcd=lcd|(1<<2); // PD2==EN=1;
 118:	92 9a       	sbi	0x12, 2	; 18
	lcd=lcd&~(1<<2); // PD2==EN=0;
 11a:	92 98       	cbi	0x12, 2	; 18
 11c:	88 ee       	ldi	r24, 0xE8	; 232
 11e:	93 e0       	ldi	r25, 0x03	; 3
 120:	28 ec       	ldi	r18, 0xC8	; 200
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	f9 01       	movw	r30, r18
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcddata+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 12a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 12c:	d9 f7       	brne	.-10     	; 0x124 <lcddata+0x42>
    lcd=data&0xf0;
    lcddata_enable();
	lcd=(data<<4)&0xf0;
	lcddata_enable();
	
}
 12e:	08 95       	ret

00000130 <lcd_write>:
  lcd_write("GOD IS ONE");//a
  lcdcmd(0xC0);
  lcd_write("BUT WHO BELIEVES");//b
}
void lcd_write(const char *x)
{
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	ec 01       	movw	r28, r24
 136:	03 c0       	rjmp	.+6      	; 0x13e <lcd_write+0xe>
  //x[0]='S';
  while( *x != '\0')
  {
 	lcddata(*x);
 138:	0e 94 71 00 	call	0xe2	; 0xe2 <lcddata>
 	x++;
 13c:	21 96       	adiw	r28, 0x01	; 1
  lcd_write("BUT WHO BELIEVES");//b
}
void lcd_write(const char *x)
{
  //x[0]='S';
  while( *x != '\0')
 13e:	88 81       	ld	r24, Y
 140:	88 23       	and	r24, r24
 142:	d1 f7       	brne	.-12     	; 0x138 <lcd_write+0x8>
  {
 	lcddata(*x);
 	x++;
  }

}
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <display>:
	lcdcmd(0x01);
 }
}
void display()
{
  lcdcmd(0x80);
 14a:	80 e8       	ldi	r24, 0x80	; 128
 14c:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
  lcd_write("GOD IS ONE");//a
 150:	80 e6       	ldi	r24, 0x60	; 96
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 98 00 	call	0x130	; 0x130 <lcd_write>
  lcdcmd(0xC0);
 158:	80 ec       	ldi	r24, 0xC0	; 192
 15a:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
  lcd_write("BUT WHO BELIEVES");//b
 15e:	8b e6       	ldi	r24, 0x6B	; 107
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 98 00 	call	0x130	; 0x130 <lcd_write>
}
 166:	08 95       	ret

00000168 <main>:
void lcddata_enable();
void display();
void lcd_write(const char *);
int main()
{
 lcd_init();
 168:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_init>
 
 while(1)
 { 
 	display();
 16c:	0e 94 a5 00 	call	0x14a	; 0x14a <display>
	lcdcmd(0x01);
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
 176:	fa cf       	rjmp	.-12     	; 0x16c <main+0x4>

00000178 <lcddata_enable>:
	lcddata_enable();
	
}
void lcddata_enable()
{
 	lcd=lcd|(1<<0);// PD0==RS=1;
 178:	90 9a       	sbi	0x12, 0	; 18
	lcd=lcd&~(1<<1);// PD1==RW=0;
 17a:	91 98       	cbi	0x12, 1	; 18
	lcd=lcd|(1<<2); // PD2==EN=1;
 17c:	92 9a       	sbi	0x12, 2	; 18
	lcd=lcd&~(1<<2); // PD2==EN=0;
 17e:	92 98       	cbi	0x12, 2	; 18
 180:	88 ee       	ldi	r24, 0xE8	; 232
 182:	93 e0       	ldi	r25, 0x03	; 3
 184:	28 ec       	ldi	r18, 0xC8	; 200
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	f9 01       	movw	r30, r18
 18a:	31 97       	sbiw	r30, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <lcddata_enable+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 18e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 190:	d9 f7       	brne	.-10     	; 0x188 <lcddata_enable+0x10>
	_delay_ms(100);
}
 192:	08 95       	ret

00000194 <_exit>:
 194:	f8 94       	cli

00000196 <__stop_program>:
 196:	ff cf       	rjmp	.-2      	; 0x196 <__stop_program>
