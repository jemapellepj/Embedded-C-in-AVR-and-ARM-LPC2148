
keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  000002aa  0000031e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000432  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000082  00000000  00000000  00000452  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000039d  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000015a  00000000  00000000  00000871  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004cb  00000000  00000000  000009cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000e98  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000143  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000a9  00000000  00000000  0000106b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 3c 01 	call	0x278	; 0x278 <main>
  7a:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcdcmd>:
 DDRD=0xff;
 lcdcmd(0x02);lcdcmd(0x28);lcdcmd(0x0e);
}
void lcdcmd(char x)
{
	lcd=x&0xf0;
  82:	28 2f       	mov	r18, r24
  84:	20 7f       	andi	r18, 0xF0	; 240
  86:	22 bb       	out	0x12, r18	; 18
	lcd= (x<<4)&0xf0;
	lcdcmd_enable();
}
void lcdcmd_enable()
{
  	lcd=lcd&~(1<<RS);
  88:	90 98       	cbi	0x12, 0	; 18
	lcd=lcd&~(1<<RW);
  8a:	91 98       	cbi	0x12, 1	; 18
	lcd=lcd|(1<<EN); 
  8c:	92 9a       	sbi	0x12, 2	; 18
	lcd=lcd&~(1<<EN);
  8e:	92 98       	cbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  90:	20 ed       	ldi	r18, 0xD0	; 208
  92:	37 e0       	ldi	r19, 0x07	; 7
  94:	f9 01       	movw	r30, r18
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <lcdcmd+0x14>
}
void lcdcmd(char x)
{
	lcd=x&0xf0;
    lcdcmd_enable();
	lcd= (x<<4)&0xf0;
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	44 e0       	ldi	r20, 0x04	; 4
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	4a 95       	dec	r20
  a4:	e1 f7       	brne	.-8      	; 0x9e <lcdcmd+0x1c>
  a6:	82 bb       	out	0x12, r24	; 18
	lcdcmd_enable();
}
void lcdcmd_enable()
{
  	lcd=lcd&~(1<<RS);
  a8:	90 98       	cbi	0x12, 0	; 18
	lcd=lcd&~(1<<RW);
  aa:	91 98       	cbi	0x12, 1	; 18
	lcd=lcd|(1<<EN); 
  ac:	92 9a       	sbi	0x12, 2	; 18
	lcd=lcd&~(1<<EN);
  ae:	92 98       	cbi	0x12, 2	; 18
  b0:	c9 01       	movw	r24, r18
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <lcdcmd+0x30>
{
	lcd=x&0xf0;
    lcdcmd_enable();
	lcd= (x<<4)&0xf0;
	lcdcmd_enable();
}
  b6:	08 95       	ret

000000b8 <lcd_init>:
	x++;
  }
}
void lcd_init()
{
 DDRD=0xff;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	81 bb       	out	0x11, r24	; 17
 lcdcmd(0x02);lcdcmd(0x28);lcdcmd(0x0e);
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
  c2:	88 e2       	ldi	r24, 0x28	; 40
  c4:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
  c8:	8e e0       	ldi	r24, 0x0E	; 14
  ca:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
}
  ce:	08 95       	ret

000000d0 <lcdcmd_enable>:
	lcd= (x<<4)&0xf0;
	lcdcmd_enable();
}
void lcdcmd_enable()
{
  	lcd=lcd&~(1<<RS);
  d0:	90 98       	cbi	0x12, 0	; 18
	lcd=lcd&~(1<<RW);
  d2:	91 98       	cbi	0x12, 1	; 18
	lcd=lcd|(1<<EN); 
  d4:	92 9a       	sbi	0x12, 2	; 18
	lcd=lcd&~(1<<EN);
  d6:	92 98       	cbi	0x12, 2	; 18
  d8:	80 ed       	ldi	r24, 0xD0	; 208
  da:	97 e0       	ldi	r25, 0x07	; 7
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <lcdcmd_enable+0xc>
	_delay_ms(1);
}
  e0:	08 95       	ret

000000e2 <lcddata>:
void lcddata(char data)
{ 
  e2:	98 2f       	mov	r25, r24
    lcd=data&0xf0;
  e4:	80 7f       	andi	r24, 0xF0	; 240
  e6:	82 bb       	out	0x12, r24	; 18
	lcddata_enable();
	
}
void lcddata_enable()
{
 	lcd=lcd|(1<<RS);
  e8:	90 9a       	sbi	0x12, 0	; 18
	lcd=lcd&~(1<<RW);
  ea:	91 98       	cbi	0x12, 1	; 18
	lcd=lcd|(1<<EN); 
  ec:	92 9a       	sbi	0x12, 2	; 18
	lcd=lcd&~(1<<EN); 
  ee:	92 98       	cbi	0x12, 2	; 18
  f0:	28 ee       	ldi	r18, 0xE8	; 232
  f2:	33 e0       	ldi	r19, 0x03	; 3
  f4:	48 ec       	ldi	r20, 0xC8	; 200
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	fa 01       	movw	r30, r20
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <lcddata+0x18>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 102:	d1 f7       	brne	.-12     	; 0xf8 <lcddata+0x16>
}
void lcddata(char data)
{ 
    lcd=data&0xf0;
    lcddata_enable();
	lcd=(data<<4)&0xf0;
 104:	89 2f       	mov	r24, r25
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	54 e0       	ldi	r21, 0x04	; 4
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	5a 95       	dec	r21
 110:	e1 f7       	brne	.-8      	; 0x10a <lcddata+0x28>
 112:	82 bb       	out	0x12, r24	; 18
	lcddata_enable();
	
}
void lcddata_enable()
{
 	lcd=lcd|(1<<RS);
 114:	90 9a       	sbi	0x12, 0	; 18
	lcd=lcd&~(1<<RW);
 116:	91 98       	cbi	0x12, 1	; 18
	lcd=lcd|(1<<EN); 
 118:	92 9a       	sbi	0x12, 2	; 18
	lcd=lcd&~(1<<EN); 
 11a:	92 98       	cbi	0x12, 2	; 18
 11c:	88 ee       	ldi	r24, 0xE8	; 232
 11e:	93 e0       	ldi	r25, 0x03	; 3
 120:	28 ec       	ldi	r18, 0xC8	; 200
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	f9 01       	movw	r30, r18
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcddata+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 12a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 12c:	d9 f7       	brne	.-10     	; 0x124 <lcddata+0x42>
    lcd=data&0xf0;
    lcddata_enable();
	lcd=(data<<4)&0xf0;
	lcddata_enable();
	
}
 12e:	08 95       	ret

00000130 <lcdstring>:
    lcdcmd(0x01);
	lcdstring("Key + is pressed");
  }
}
void lcdstring(char *x)
{
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	ec 01       	movw	r28, r24
 136:	03 c0       	rjmp	.+6      	; 0x13e <lcdstring+0xe>
  while(*x !='\0')
  {
    lcddata(*x);
 138:	0e 94 71 00 	call	0xe2	; 0xe2 <lcddata>
	x++;
 13c:	21 96       	adiw	r28, 0x01	; 1
	lcdstring("Key + is pressed");
  }
}
void lcdstring(char *x)
{
  while(*x !='\0')
 13e:	88 81       	ld	r24, Y
 140:	88 23       	and	r24, r24
 142:	d1 f7       	brne	.-12     	; 0x138 <lcdstring+0x8>
  {
    lcddata(*x);
	x++;
  }
}
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <keypad_scan>:
    keypad_scan();
  }
}
void keypad_scan()
{
   PORTA=PORTA&~(1<<col0);
 14a:	dc 98       	cbi	0x1b, 4	; 27
  PORTA=PORTA|(1<<col1)|(1<<col2)|(1<<col3);
 14c:	8b b3       	in	r24, 0x1b	; 27
 14e:	80 6e       	ori	r24, 0xE0	; 224
 150:	8b bb       	out	0x1b, r24	; 27
  if( (PINA&(1<<0))==0)
 152:	c8 99       	sbic	0x19, 0	; 25
 154:	06 c0       	rjmp	.+12     	; 0x162 <keypad_scan+0x18>
  {
    lcdcmd(0x01);
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdstring("Key 7 is pressed");
 15c:	80 e6       	ldi	r24, 0x60	; 96
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	17 c0       	rjmp	.+46     	; 0x190 <keypad_scan+0x46>
  }
  else if( (PINA&(1<<1))==0)
 162:	c9 99       	sbic	0x19, 1	; 25
 164:	06 c0       	rjmp	.+12     	; 0x172 <keypad_scan+0x28>
  {
    lcdcmd(0x01);
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdstring("Key 4 is pressed");
 16c:	81 e7       	ldi	r24, 0x71	; 113
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0f c0       	rjmp	.+30     	; 0x190 <keypad_scan+0x46>
  }
 else if( (PINA&(1<<2))==0)
 172:	ca 99       	sbic	0x19, 2	; 25
 174:	06 c0       	rjmp	.+12     	; 0x182 <keypad_scan+0x38>
  {
    lcdcmd(0x01);
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdstring("Key 1 is pressed");
 17c:	82 e8       	ldi	r24, 0x82	; 130
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	07 c0       	rjmp	.+14     	; 0x190 <keypad_scan+0x46>
  }
 else if( (PINA&(1<<3))==0)
 182:	cb 99       	sbic	0x19, 3	; 25
 184:	07 c0       	rjmp	.+14     	; 0x194 <keypad_scan+0x4a>
  {
    lcdcmd(0x01);
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdstring("Key ON/OF is pressed");
 18c:	83 e9       	ldi	r24, 0x93	; 147
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 98 00 	call	0x130	; 0x130 <lcdstring>
  }

  PORTA=PORTA&~(1<<col1);
 194:	dd 98       	cbi	0x1b, 5	; 27
  PORTA=PORTA|(1<<col0)|(1<<col2)|(1<<col3);
 196:	8b b3       	in	r24, 0x1b	; 27
 198:	80 6d       	ori	r24, 0xD0	; 208
 19a:	8b bb       	out	0x1b, r24	; 27

  if( (PINA&(1<<0))==0)
 19c:	c8 99       	sbic	0x19, 0	; 25
 19e:	06 c0       	rjmp	.+12     	; 0x1ac <keypad_scan+0x62>
  {
    lcdcmd(0x01);
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdstring("Key 8 is pressed");
 1a6:	88 ea       	ldi	r24, 0xA8	; 168
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	17 c0       	rjmp	.+46     	; 0x1da <keypad_scan+0x90>
  }
  else if( (PINA&(1<<1))==0)
 1ac:	c9 99       	sbic	0x19, 1	; 25
 1ae:	06 c0       	rjmp	.+12     	; 0x1bc <keypad_scan+0x72>
  {
    lcdcmd(0x01);
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdstring("Key 5 is pressed");
 1b6:	89 eb       	ldi	r24, 0xB9	; 185
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0f c0       	rjmp	.+30     	; 0x1da <keypad_scan+0x90>
  }
 else if( (PINA&(1<<2))==0)
 1bc:	ca 99       	sbic	0x19, 2	; 25
 1be:	06 c0       	rjmp	.+12     	; 0x1cc <keypad_scan+0x82>
  {
    lcdcmd(0x01);
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdstring("Key 2 is pressed");
 1c6:	8a ec       	ldi	r24, 0xCA	; 202
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	07 c0       	rjmp	.+14     	; 0x1da <keypad_scan+0x90>
  }
 else if( (PINA&(1<<3))==0)
 1cc:	cb 99       	sbic	0x19, 3	; 25
 1ce:	07 c0       	rjmp	.+14     	; 0x1de <keypad_scan+0x94>
  {
    lcdcmd(0x01);
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdstring("Key 0 is pressed");
 1d6:	8b ed       	ldi	r24, 0xDB	; 219
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 98 00 	call	0x130	; 0x130 <lcdstring>
  }

  PORTA=PORTA&~(1<<col2);
 1de:	de 98       	cbi	0x1b, 6	; 27
  PORTA=PORTA|(1<<col0)|(1<<col1)|(1<<col3);
 1e0:	8b b3       	in	r24, 0x1b	; 27
 1e2:	80 6b       	ori	r24, 0xB0	; 176
 1e4:	8b bb       	out	0x1b, r24	; 27

  if( (PINA&(1<<0))==0)
 1e6:	c8 99       	sbic	0x19, 0	; 25
 1e8:	06 c0       	rjmp	.+12     	; 0x1f6 <keypad_scan+0xac>
  {
    lcdcmd(0x01);
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdstring("Key 9 is pressed");
 1f0:	8c ee       	ldi	r24, 0xEC	; 236
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	17 c0       	rjmp	.+46     	; 0x224 <keypad_scan+0xda>
  }
  else if( (PINA&(1<<1))==0)
 1f6:	c9 99       	sbic	0x19, 1	; 25
 1f8:	06 c0       	rjmp	.+12     	; 0x206 <keypad_scan+0xbc>
  {
    lcdcmd(0x01);
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdstring("Key 6 is pressed");
 200:	8d ef       	ldi	r24, 0xFD	; 253
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0f c0       	rjmp	.+30     	; 0x224 <keypad_scan+0xda>
  }
 else if( (PINA&(1<<2))==0)
 206:	ca 99       	sbic	0x19, 2	; 25
 208:	06 c0       	rjmp	.+12     	; 0x216 <keypad_scan+0xcc>
  {
    lcdcmd(0x01);
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdstring("Key 3 is pressed");
 210:	8e e0       	ldi	r24, 0x0E	; 14
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	07 c0       	rjmp	.+14     	; 0x224 <keypad_scan+0xda>
  }
 else if( (PINA&(1<<3))==0)
 216:	cb 99       	sbic	0x19, 3	; 25
 218:	07 c0       	rjmp	.+14     	; 0x228 <keypad_scan+0xde>
  {
    lcdcmd(0x01);
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdstring("Key = is pressed");
 220:	8f e1       	ldi	r24, 0x1F	; 31
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 98 00 	call	0x130	; 0x130 <lcdstring>
  }
 
  PORTA=PORTA&~(1<<col3);
 228:	df 98       	cbi	0x1b, 7	; 27
  PORTA=PORTA|(1<<col0)|(1<<col1)|(1<<col2);
 22a:	8b b3       	in	r24, 0x1b	; 27
 22c:	80 67       	ori	r24, 0x70	; 112
 22e:	8b bb       	out	0x1b, r24	; 27

  if( (PINA&(1<<0))==0)
 230:	c8 99       	sbic	0x19, 0	; 25
 232:	06 c0       	rjmp	.+12     	; 0x240 <keypad_scan+0xf6>
  {
    lcdcmd(0x01);
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdstring("Key / is pressed");
 23a:	80 e3       	ldi	r24, 0x30	; 48
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	0f c0       	rjmp	.+30     	; 0x25e <keypad_scan+0x114>
  }
  else if( (PINA&(1<<1))==0)
 240:	c9 99       	sbic	0x19, 1	; 25
 242:	06 c0       	rjmp	.+12     	; 0x250 <keypad_scan+0x106>
  {
    lcdcmd(0x01);
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdstring("Key * is pressed");
 24a:	81 e4       	ldi	r24, 0x41	; 65
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	07 c0       	rjmp	.+14     	; 0x25e <keypad_scan+0x114>
  }
 else if( (PINA&(1<<2))==0)
 250:	ca 99       	sbic	0x19, 2	; 25
 252:	08 c0       	rjmp	.+16     	; 0x264 <keypad_scan+0x11a>
  {
    lcdcmd(0x01);
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdstring("Key - is pressed");
 25a:	82 e5       	ldi	r24, 0x52	; 82
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	0e 94 98 00 	call	0x130	; 0x130 <lcdstring>
 262:	08 95       	ret
  }
 else if( (PINA&(1<<3))==0)
 264:	cb 99       	sbic	0x19, 3	; 25
 266:	07 c0       	rjmp	.+14     	; 0x276 <keypad_scan+0x12c>
  {
    lcdcmd(0x01);
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
	lcdstring("Key + is pressed");
 26e:	83 e6       	ldi	r24, 0x63	; 99
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	0e 94 98 00 	call	0x130	; 0x130 <lcdstring>
 276:	08 95       	ret

00000278 <main>:
void display();
void lcdstring( char *);
void keypad_scan();
int main()
{
  PORTA=0x0f;
 278:	8f e0       	ldi	r24, 0x0F	; 15
 27a:	8b bb       	out	0x1b, r24	; 27
  DDRA =0xf0;
 27c:	80 ef       	ldi	r24, 0xF0	; 240
 27e:	8a bb       	out	0x1a, r24	; 26
  lcd_init();
 280:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_init>
  while(1)
  {
    keypad_scan();
 284:	0e 94 a5 00 	call	0x14a	; 0x14a <keypad_scan>
 288:	fd cf       	rjmp	.-6      	; 0x284 <main+0xc>

0000028a <lcddata_enable>:
	lcddata_enable();
	
}
void lcddata_enable()
{
 	lcd=lcd|(1<<RS);
 28a:	90 9a       	sbi	0x12, 0	; 18
	lcd=lcd&~(1<<RW);
 28c:	91 98       	cbi	0x12, 1	; 18
	lcd=lcd|(1<<EN); 
 28e:	92 9a       	sbi	0x12, 2	; 18
	lcd=lcd&~(1<<EN); 
 290:	92 98       	cbi	0x12, 2	; 18
 292:	88 ee       	ldi	r24, 0xE8	; 232
 294:	93 e0       	ldi	r25, 0x03	; 3
 296:	28 ec       	ldi	r18, 0xC8	; 200
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	f9 01       	movw	r30, r18
 29c:	31 97       	sbiw	r30, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <lcddata_enable+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2a2:	d9 f7       	brne	.-10     	; 0x29a <lcddata_enable+0x10>
	_delay_ms(100);
}
 2a4:	08 95       	ret

000002a6 <_exit>:
 2a6:	f8 94       	cli

000002a8 <__stop_program>:
 2a8:	ff cf       	rjmp	.-2      	; 0x2a8 <__stop_program>
