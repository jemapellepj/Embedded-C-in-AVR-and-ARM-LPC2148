
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000186  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000186  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000007e  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003a2  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000161  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002f6  00000000  00000000  000007b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000aac  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000013f  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000a9  00000000  00000000  00000c7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e8       	ldi	r30, 0x86	; 134
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  7a:	0c 94 c1 00 	jmp	0x182	; 0x182 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcdcmd>:
 DDRD=0xff;
 lcdcmd(0x02);lcdcmd(0x28);lcdcmd(0x0e);
}
void lcdcmd(char x)
{
	lcd=x&0xf0;
  82:	28 2f       	mov	r18, r24
  84:	20 7f       	andi	r18, 0xF0	; 240
  86:	22 bb       	out	0x12, r18	; 18
	lcd= (x<<4)&0xf0;
	lcdcmd_enable();
}
void lcdcmd_enable()
{
  	lcd=lcd&~(1<<RS);
  88:	90 98       	cbi	0x12, 0	; 18
	lcd=lcd|(1<<EN); 
  8a:	91 9a       	sbi	0x12, 1	; 18
	lcd=lcd&~(1<<EN);
  8c:	91 98       	cbi	0x12, 1	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8e:	20 ed       	ldi	r18, 0xD0	; 208
  90:	37 e0       	ldi	r19, 0x07	; 7
  92:	f9 01       	movw	r30, r18
  94:	31 97       	sbiw	r30, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <lcdcmd+0x12>
}
void lcdcmd(char x)
{
	lcd=x&0xf0;
    lcdcmd_enable();
	lcd= (x<<4)&0xf0;
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	44 e0       	ldi	r20, 0x04	; 4
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	4a 95       	dec	r20
  a2:	e1 f7       	brne	.-8      	; 0x9c <lcdcmd+0x1a>
  a4:	82 bb       	out	0x12, r24	; 18
	lcdcmd_enable();
}
void lcdcmd_enable()
{
  	lcd=lcd&~(1<<RS);
  a6:	90 98       	cbi	0x12, 0	; 18
	lcd=lcd|(1<<EN); 
  a8:	91 9a       	sbi	0x12, 1	; 18
	lcd=lcd&~(1<<EN);
  aa:	91 98       	cbi	0x12, 1	; 18
  ac:	c9 01       	movw	r24, r18
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <lcdcmd+0x2c>
{
	lcd=x&0xf0;
    lcdcmd_enable();
	lcd= (x<<4)&0xf0;
	lcdcmd_enable();
}
  b2:	08 95       	ret

000000b4 <lcd_init>:

}

void lcd_init()
{
 DDRD=0xff;
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	81 bb       	out	0x11, r24	; 17
 lcdcmd(0x02);lcdcmd(0x28);lcdcmd(0x0e);
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
  be:	88 e2       	ldi	r24, 0x28	; 40
  c0:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
  c4:	8e e0       	ldi	r24, 0x0E	; 14
  c6:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
}
  ca:	08 95       	ret

000000cc <lcdcmd_enable>:
	lcd= (x<<4)&0xf0;
	lcdcmd_enable();
}
void lcdcmd_enable()
{
  	lcd=lcd&~(1<<RS);
  cc:	90 98       	cbi	0x12, 0	; 18
	lcd=lcd|(1<<EN); 
  ce:	91 9a       	sbi	0x12, 1	; 18
	lcd=lcd&~(1<<EN);
  d0:	91 98       	cbi	0x12, 1	; 18
  d2:	80 ed       	ldi	r24, 0xD0	; 208
  d4:	97 e0       	ldi	r25, 0x07	; 7
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcdcmd_enable+0xa>
	_delay_ms(1);
}
  da:	08 95       	ret

000000dc <lcddata>:
void lcddata(char data)
{ 
  dc:	98 2f       	mov	r25, r24
    lcd=data&0xf0;
  de:	80 7f       	andi	r24, 0xF0	; 240
  e0:	82 bb       	out	0x12, r24	; 18
	lcddata_enable();
	
}
void lcddata_enable()
{
 	lcd=lcd|(1<<RS);
  e2:	90 9a       	sbi	0x12, 0	; 18
	lcd=lcd|(1<<EN); 
  e4:	91 9a       	sbi	0x12, 1	; 18
	lcd=lcd&~(1<<EN); 
  e6:	91 98       	cbi	0x12, 1	; 18
  e8:	28 ee       	ldi	r18, 0xE8	; 232
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	48 ec       	ldi	r20, 0xC8	; 200
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	fa 01       	movw	r30, r20
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <lcddata+0x16>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fa:	d1 f7       	brne	.-12     	; 0xf0 <lcddata+0x14>
}
void lcddata(char data)
{ 
    lcd=data&0xf0;
    lcddata_enable();
	lcd=(data<<4)&0xf0;
  fc:	89 2f       	mov	r24, r25
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	54 e0       	ldi	r21, 0x04	; 4
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	5a 95       	dec	r21
 108:	e1 f7       	brne	.-8      	; 0x102 <lcddata+0x26>
 10a:	82 bb       	out	0x12, r24	; 18
	lcddata_enable();
	
}
void lcddata_enable()
{
 	lcd=lcd|(1<<RS);
 10c:	90 9a       	sbi	0x12, 0	; 18
	lcd=lcd|(1<<EN); 
 10e:	91 9a       	sbi	0x12, 1	; 18
	lcd=lcd&~(1<<EN); 
 110:	91 98       	cbi	0x12, 1	; 18
 112:	88 ee       	ldi	r24, 0xE8	; 232
 114:	93 e0       	ldi	r25, 0x03	; 3
 116:	28 ec       	ldi	r18, 0xC8	; 200
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	f9 01       	movw	r30, r18
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcddata+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 120:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 122:	d9 f7       	brne	.-10     	; 0x11a <lcddata+0x3e>
    lcd=data&0xf0;
    lcddata_enable();
	lcd=(data<<4)&0xf0;
	lcddata_enable();
	
}
 124:	08 95       	ret

00000126 <lcd_write>:
{
  lcdcmd(0x80);
  lcd_write("WELCOME TO CETPA INFOTECH");
}
void lcd_write(const char *x)
{
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	ec 01       	movw	r28, r24
  lcdcmd(0x8F);
 12c:	8f e8       	ldi	r24, 0x8F	; 143
 12e:	04 c0       	rjmp	.+8      	; 0x138 <lcd_write+0x12>
  while( *x != '\0')
  {
 	lcddata(*x);
 130:	0e 94 6e 00 	call	0xdc	; 0xdc <lcddata>
 	x++;
 134:	21 96       	adiw	r28, 0x01	; 1
	lcdcmd(0x1c);
 136:	8c e1       	ldi	r24, 0x1C	; 28
 138:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
  lcd_write("WELCOME TO CETPA INFOTECH");
}
void lcd_write(const char *x)
{
  lcdcmd(0x8F);
  while( *x != '\0')
 13c:	88 81       	ld	r24, Y
 13e:	88 23       	and	r24, r24
 140:	b9 f7       	brne	.-18     	; 0x130 <lcd_write+0xa>
 	lcddata(*x);
 	x++;
	lcdcmd(0x1c);
  }

}
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <display>:
	lcdcmd(0x01);
 }
}
void display()
{
  lcdcmd(0x80);
 148:	80 e8       	ldi	r24, 0x80	; 128
 14a:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
  lcd_write("WELCOME TO CETPA INFOTECH");
 14e:	80 e6       	ldi	r24, 0x60	; 96
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 93 00 	call	0x126	; 0x126 <lcd_write>
}
 156:	08 95       	ret

00000158 <main>:
void lcddata_enable();
void display();
void lcd_write(const char *);
int main()
{
 lcd_init();
 158:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_init>
 
 while(1)
 { 
 	display();
 15c:	0e 94 a4 00 	call	0x148	; 0x148 <display>
	lcdcmd(0x01);
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	0e 94 41 00 	call	0x82	; 0x82 <lcdcmd>
 166:	fa cf       	rjmp	.-12     	; 0x15c <main+0x4>

00000168 <lcddata_enable>:
	lcddata_enable();
	
}
void lcddata_enable()
{
 	lcd=lcd|(1<<RS);
 168:	90 9a       	sbi	0x12, 0	; 18
	lcd=lcd|(1<<EN); 
 16a:	91 9a       	sbi	0x12, 1	; 18
	lcd=lcd&~(1<<EN); 
 16c:	91 98       	cbi	0x12, 1	; 18
 16e:	88 ee       	ldi	r24, 0xE8	; 232
 170:	93 e0       	ldi	r25, 0x03	; 3
 172:	28 ec       	ldi	r18, 0xC8	; 200
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	f9 01       	movw	r30, r18
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcddata_enable+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 17c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 17e:	d9 f7       	brne	.-10     	; 0x176 <lcddata_enable+0xe>
	_delay_ms(100);
}
 180:	08 95       	ret

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
