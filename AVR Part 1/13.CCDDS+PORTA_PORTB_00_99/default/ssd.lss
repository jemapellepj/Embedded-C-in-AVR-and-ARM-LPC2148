
ssd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000de  00000172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006a  0080006a  0000017c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000031  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000015f  00000000  00000000  000001cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000ef  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000146  00000000  00000000  0000041b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000564  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000ec  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000018  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ed       	ldi	r30, 0xDE	; 222
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include<util/delay.h>
		//		0		1	2	3	4		5   6	7	 8	  9
char ccssd[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
int i,j;
int main()
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  DDRA=DDRB= 0b11111111;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	87 bb       	out	0x17, r24	; 23
  9a:	87 b3       	in	r24, 0x17	; 23
  9c:	8a bb       	out	0x1a, r24	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	28 ec       	ldi	r18, 0xC8	; 200
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	c0 e6       	ldi	r28, 0x60	; 96
  a4:	d0 e0       	ldi	r29, 0x00	; 0
  a6:	14 c0       	rjmp	.+40     	; 0xd0 <main+0x3e>
  while(1)
  {
  	
	for(i=0;i<=9;i++)
	{
  		PORTA=ccssd[i];//99
  a8:	88 81       	ld	r24, Y
  aa:	8b bb       	out	0x1b, r24	; 27
  ac:	a0 e6       	ldi	r26, 0x60	; 96
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	0a c0       	rjmp	.+20     	; 0xc6 <main+0x34>
		for(j=0;j<=9;j++)
		{
		 PORTB=ccssd[j];
  b2:	8c 91       	ld	r24, X
  b4:	88 bb       	out	0x18, r24	; 24
  b6:	88 eb       	ldi	r24, 0xB8	; 184
  b8:	9b e0       	ldi	r25, 0x0B	; 11
  ba:	f9 01       	movw	r30, r18
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c2:	d9 f7       	brne	.-10     	; 0xba <main+0x28>
  c4:	11 96       	adiw	r26, 0x01	; 1
  {
  	
	for(i=0;i<=9;i++)
	{
  		PORTA=ccssd[i];//99
		for(j=0;j<=9;j++)
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	aa 36       	cpi	r26, 0x6A	; 106
  ca:	b8 07       	cpc	r27, r24
  cc:	91 f7       	brne	.-28     	; 0xb2 <main+0x20>
  ce:	21 96       	adiw	r28, 0x01	; 1
{
  DDRA=DDRB= 0b11111111;
  while(1)
  {
  	
	for(i=0;i<=9;i++)
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	ca 36       	cpi	r28, 0x6A	; 106
  d4:	d8 07       	cpc	r29, r24
  d6:	29 f3       	breq	.-54     	; 0xa2 <main+0x10>
  d8:	e7 cf       	rjmp	.-50     	; 0xa8 <main+0x16>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
